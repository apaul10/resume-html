{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"bs3-col",
				"bs3-col:9\tbs3-col-9"
			],
			[
				"BUDGET_PERIO",
				"BUDGET_PERIODS\t(constants.py)"
			],
			[
				"BUDGET_PE",
				"BUDGET_PERIOD_QUARTERLY"
			],
			[
				"BudgetFor",
				"BudgetFormMixin"
			],
			[
				"BudgetFo",
				"BudgetFormMixin"
			],
			[
				"category_b",
				"category_budget"
			],
			[
				"COL",
				"COLOR_EXPENSE"
			],
			[
				"cate",
				"category"
			],
			[
				"inst",
				"instance"
			],
			[
				"instan",
				"instances"
			],
			[
				"form",
				"formset"
			],
			[
				"CateF",
				"CategoryBudgetFormSet"
			],
			[
				"prefix",
				"formset_prefix"
			],
			[
				"get_form",
				"get_formset_class"
			],
			[
				"CategoryBud",
				"CategoryBudgetFormSet"
			],
			[
				"CategoryB",
				"CategoryBudget"
			],
			[
				"CtegoryB",
				"CategoryBudgetFormSet\t(forms.py)"
			],
			[
				"Categ",
				"CategoryBudgetFormset"
			],
			[
				"COLOR_BU",
				"COLOR_BUDGET_EXCEEDED"
			],
			[
				"COLOR_",
				"COLOR_BUDGET_EXCEEDED"
			],
			[
				"COLOR_BUD",
				"COLOR_BUDGET_USED"
			],
			[
				"get_da",
				"get_dataseries"
			],
			[
				"Bud",
				"BudgetsSummaryChart"
			],
			[
				"COLOR",
				"COLOR_BUDGETED"
			],
			[
				"COLOR_B",
				"COLOR_BUDGET_USED"
			],
			[
				"transac",
				"transaction"
			],
			[
				"tran",
				"transaction"
			],
			[
				"trans",
				"transaction"
			],
			[
				"bud",
				"budget"
			],
			[
				"if",
				"ife\tif... else..."
			],
			[
				"get_mon",
				"get_months_ago"
			],
			[
				"var",
				"var\tcontext variable (var)"
			],
			[
				"paginat",
				"paginate_by"
			],
			[
				"widt",
				"width\tAttr"
			],
			[
				"categor",
				"category\t(views.py)"
			],
			[
				"get_qer",
				"get_queryset_kwargs"
			],
			[
				"get_quer",
				"get_queryset_kwargs"
			],
			[
				"categori",
				"categories"
			],
			[
				"transactp",
				"transaction_type"
			],
			[
				"dats",
				"datasets"
			],
			[
				"tranas",
				"transaction"
			],
			[
				"Cate",
				"CategoryFactory\t(factories.py)"
			],
			[
				"get_summ",
				"get_category_summaries_by_period\t(managers.py)"
			],
			[
				"get_summar",
				"get_summary_by_months\t(managers.py)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 8002,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "css/main.css",
			"settings":
			{
				"buffer_size": 986,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 123.0,
		"last_filter": "addfo",
		"selected_items":
		[
			[
				"addfo",
				"Project: Add Folder"
			],
			[
				"saveas",
				"Project: Save As"
			],
			[
				"closeal",
				"File: Close All"
			],
			[
				"closeall",
				"File: Close All"
			],
			[
				"javasc",
				"Set Syntax: JavaScript"
			],
			[
				"clos",
				"File: Close All"
			],
			[
				"shell",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"close",
				"Project: Close"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"user ",
				"Preferences: Key Bindings - User"
			],
			[
				"djang",
				"Set Syntax: HTML (Django)"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"django",
				"Set Syntax: HTML (Django)"
			],
			[
				"spaces",
				"Indentation: Convert to Spaces"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"installp",
				"Package Control: Install Package"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"unins",
				"Sublemacs - Emacs style universal argument"
			],
			[
				"addfl",
				"Project: Add Folder"
			],
			[
				"instac",
				"Package Control: Install Package"
			],
			[
				"addfold",
				"Project: Add Folder"
			]
		],
		"width": 503.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jaywhy13/code/resume-html"
	],
	"file_history":
	[
		"/Users/jaywhy13/code/resume-html/css/print.css",
		"/Users/jaywhy13/code/postdis/resources/views/layouts/base.blade.php",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/forms.py",
		"/Users/jaywhy13/code/django-whatyouspend/static_root/js/budget.js",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/models.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/budget_form.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/constants.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/home.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/transaction_detail.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/transaction_form.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/transaction_list.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/base.html",
		"/Users/jaywhy13/code/django-whatyouspend/static_root/css/main.css",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/budget_detail.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/budget_list.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/category_detail.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/category_list.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/chart.html",
		"/Users/jaywhy13/code/django-whatyouspend/manage.py",
		"/Users/jaywhy13/code/django-whatyouspend/django_whatyouspend/settings.py",
		"/Users/jaywhy13/code/django-whatyouspend/Aptfile",
		"/Users/jaywhy13/code/django-whatyouspend/requirements.txt",
		"/Users/jaywhy13/code/django-whatyouspend/django_whatyouspend/settings_heroku.py",
		"/Users/jaywhy13/code/django-whatyouspend/django_whatyouspend/wsgi.py",
		"/Users/jaywhy13/code/django-whatyouspend/Procfile",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/views.py",
		"/Users/jaywhy13/code/django-whatyouspend/openshift/scripts/run-in-container.sh",
		"/Users/jaywhy13/code/django-whatyouspend/.env",
		"/Users/jaywhy13/code/django-whatyouspend/Dockerfile",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/static/css/main.css",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/urls.py",
		"/Users/jaywhy13/code/django-whatyouspend/docker-compose.yml",
		"/Users/jaywhy13/Documents/Passwords/ALL",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/charts/dashboard.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/charts/categories.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/charts/budgets.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/charts/__init__.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/charts.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/migrations/0001_initial.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/static/js/budget.js",
		"/Users/jaywhy13/code/django-whatyouspend/docs/charts.rst",
		"/Users/jaywhy13/code/django-whatyouspend/README.md",
		"/Users/jaywhy13/code/django-whatyouspend/docs/index.rst",
		"/Users/jaywhy13/code/django-whatyouspend/docs/conf.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/managers.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templatetags/wyscharts.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/chart_js.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/chart.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templatetags/__init__.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/mixins.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/transaction_table.html",
		"/Users/jaywhy13/code/wordpress-docker-test/docker-compose.yml",
		"/Users/jaywhy13/code/wordpress-docker-test/Dockerfile",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/budget_table.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/utils.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/category_summary_table.html",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/pagination.html",
		"/Users/jaywhy13/code/django-whatyouspend/django_whatyouspend/urls.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/static/js/lib/numeral.min.js",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/tests.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/factories.py",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/static/js/lib/Chart.js",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/chart_views.py",
		"/Users/jaywhy13/code/django-whatyouspend/django_whatyouspend/settings_openshift.py",
		"/Users/jaywhy13/code/django-whatyouspend/.openshift/action_hooks/build",
		"/Users/jaywhy13/code/django-whatyouspend/.openshift/action_hooks/deploy",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/static/js/transaction.js",
		"/Users/jaywhy13/code/django-whatyouspend/.openshift/action_hooks/start",
		"/Users/jaywhy13/code/django-whatyouspend/django_whatyouspend/openshift.py",
		"/Users/jaywhy13/code/django-whatyouspend/.gitignore",
		"/Users/jaywhy13/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/jaywhy13/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/jaywhy13/code/django-whatyouspend/whatyouspend/templates/whatyouspend/partials/budget_transaction_table.html",
		"/Users/jaywhy13/Library/Application Support/Sublime Text 3/Packages/Emmet/Default (OSX).sublime-keymap",
		"/Users/jaywhy13/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/jaywhy13/code/wordpress-docker-test/creds"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 158.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"tiny",
			"<",
			"p",
			"span",
			"h3",
			"period",
			"form",
			"formset",
			"CategoryBudgetFormSetViewModel",
			"formset",
			"CategoryBudgetFormSet",
			"start_date",
			"hidden-xs",
			"9",
			"DATABASE_URL",
			"uses_netloc",
			"{{ pr",
			"DJANGO_SETTINGS_MODULE",
			"os",
			"category",
			"amount",
			"get_form_kwargs",
			"budget",
			"Budget",
			"category",
			"Category",
			"Transaction",
			"get_months_ago",
			"get_month_name",
			"get_months_ago",
			"get_month_name",
			"get_months_ago",
			"COLOR_CHART_DEFAULT",
			"self",
			"budget",
			"amount",
			"add_transactions_to_budget",
			"instance",
			"date",
			"instance",
			"self.totalForms()",
			"id",
			"formsetCopy",
			"initial",
			"get_formset_class",
			"get_formset",
			"CategoryBudgetForm",
			"CustomCategoryBudgetForm",
			"super",
			"CustomCategoryBudgetFormset",
			"form",
			"BaseInlineFormset",
			"BaseInlineFormSet",
			"BudgetForm",
			"TRANSACTION_TYPES",
			"series",
			"COLOR_BUDGETED",
			"COLOR_CHART_DEFAULT",
			"amount_used",
			"ChartViewMixin",
			"get_context_data",
			"summary_chart",
			"wyschart ",
			"height",
			"width",
			"id",
			"chart",
			"format_string",
			"current_time",
			"8000",
			"SummaryChart",
			"Count",
			"get_transactions",
			"instance",
			"date",
			"kwargs",
			"date",
			"category",
			"page",
			"%",
			"BudgetForm",
			"amount",
			"month",
			" ",
			"income_budgets",
			"budgets",
			"income_budgets",
			"'",
			"SummaryChart",
			"summaryChart",
			"category_name",
			"transaction_type",
			"'#00c853'",
			"#ff6d00\"",
			"kwargs",
			"from pprint import pprint\nfrom datetime import datetime\n\nimport pandas as pd\n\nfrom django.db.models import Q\n\nfrom whatyouspend.utils import get_month_name\nfrom whatyouspend.models import Transaction, Category\nfrom whatyouspend.constants import EXPENSE, INCOME\n\n\nclass Chart(object):\n\n    type = 'bar'\n\n    labels = []\n\n    datasets = []\n\n    chart_title = None\n\n    def get_queryset(self):\n        return None\n\n    def get_type(self):\n        return self.type\n\n    def get_chart_title(self):\n        \"\"\" Returns the name of the chart\n        \"\"\"\n        return self.chart_title\n\n    def get_chart_options(self):\n        \"\"\" Returns the options for the chart\n        \"\"\"\n        options = {}\n        title = self.get_chart_title()\n        if title:\n            options['title'] = dict(display=True, text=title)\n        return options\n\n    def get_data(self):\n        \"\"\" Returns the data for the chart\n        \"\"\"\n        return {\n            'labels': self.get_labels(),\n            'datasets': self.get_chart_datasets(),\n        }\n\n    def get_datasets(self):\n        \"\"\" Returns the datasets configured\n        \"\"\"\n        return self.datasets\n\n    def get_chart_datasets(self):\n        \"\"\" Returns the datasets for the chart\n        \"\"\"\n        df = self.get_dataframe()\n        return [{\n            'label': dataset.get('title'),\n            'data': list(df['series%s' % i]),\n            'backgroundColor': dataset.get('backgroundColor')\n        } for i, dataset in enumerate(self.get_datasets())]\n\n    def get_dataseries(self):\n        \"\"\" Creates panda series for each dataset defined in the datasets\n            property. If our datasets are defined like so:\n            [\n                {\n                    \"title\": \"Income\",\n                    \"key\": \"year\",\n                    \"value\": \"sum\",\n                    \"filters\": {\n                        \"transaction_type\": INCOME\n                    }\n                }\n            ]\n            Alternatively, we can use tuples for keys.\n            [\n                {\n                    \"title\": \"Income\",\n                    \"key\": [\"year\", \"month\"],\n                    \"value\": \"sum\",\n                    \"filters\": {\n                        \"transaction_type\": INCOME\n                    }\n                }\n            ]\n\n        \"\"\"\n        series = {}\n        for i, dataset in enumerate(self.datasets):\n            key = dataset.get(\"key\")\n            val = dataset.get(\"value\")\n            filters = dataset.get(\"filters\", {})\n\n            if isinstance(key, tuple) or isinstance(key, list):\n                data = {\n                    tuple([result.get(part)\n                          for part in key]): result.get(val) for result in self.get_queryset(**filters)}\n            else:\n                data = {result.get(key): result.get(val)\n                        for result in self.get_queryset()}\n            print(\"Adding series with data: %s\" % data)\n            series['series%s' % i] = pd.Series(data)\n        return series\n\n    def get_labels(self):\n        \"\"\" Returns the labels to be used with the data\n        \"\"\"\n        return list(self.get_dataframe().index)\n\n    def get_dataframe(self):\n        \"\"\" Constructs a Panda data frame with both series\n        \"\"\"\n        df = pd.DataFrame(self.get_dataseries())\n        print(\"This is the data frame:\")\n        print(df)\n        return df\n\n    def get_json(self):\n        \"\"\" Returns the configuration for Chart JS\n        \"\"\"\n        return {\n            'type': self.get_type(),\n            'data': self.get_data(),\n            'options': self.get_chart_options(),\n        }\n\n    def get_unique(self, values):\n        \"\"\" Returns a unique set of fields specified in values from the\n            query set provided\n        \"\"\"\n        return set([\n            tuple([result.get(value) for value in values])\n            for result in self.get_queryset()\n        ])\n\n    def get_filtered(self, **kwargs):\n        \"\"\" Filters the queryset by the kwargs provided\n        \"\"\"\n        print(\"Filtering kwargs: %s\" % kwargs)\n        pprint(self.get_queryset())\n        return [\n            result for result in self.get_queryset()\n            if all([result.get(key) == val for key, val in kwargs.items()])\n        ]\n\n\nclass SummaryChart(Chart):\n\n    datasets = [\n        {\n            'title': 'Income',\n            'key': ['year', 'month'],\n            'value': 'sum',\n            'filters': {\n                'transaction_type': INCOME\n            },\n            \"backgroundColor\": [\n                '#00c853',\n                '#00c853',\n                '#00c853',\n                '#00c853',\n                '#00c853',\n                '#00c853',\n            ]\n        },\n        {\n            'title': 'Expense',\n            'key': ['year', 'month'],\n            'value': 'sum',\n            'filters': {\n                'transaction_type': EXPENSE\n            },\n            \"backgroundColor\": [\n                \"#ff6d00\",\n                \"#ff6d00\",\n                \"#ff6d00\",\n                \"#ff6d00\",\n                \"#ff6d00\",\n                \"#ff6d00\",\n            ]\n        },\n    ]\n\n    def get_queryset(self, **kwargs):\n        \"\"\" Get summary of tranasctions grouped by year and month\n        \"\"\"\n        return Transaction.objects.get_summaries_by_period(\n            [\"year\", \"month\", \"transaction_type\"], limit=6, **kwargs)\n\n    def get_labels(self):\n        \"\"\" Returns the labels to be used with the data\n        \"\"\"\n        labels = super(SummaryChart, self).get_labels()\n        print(\"Here are the labels: %s\" % labels)\n        return map(\n            lambda val: get_month_name(*val), labels)\n\n\nclass CategorySummaryChart(Chart):\n    \"\"\" This chart shows the total amount spent for each category for a\n        given month.\n    \"\"\"\n\n    def __init__(self, year=None, month=None, transaction_type=None):\n        self.year = year\n        self.month = month\n        self.transaction_type = transaction_type\n\n    def get_datasets(self):\n        categories = Category.objects.filter(~Q(transactions=None))\n        return [{\n            'title': category.name,\n            'filters': {\n                'category': category.pk\n            }\n        } for category in categories\n        ]\n\n\n    def get_queryset(self, **kwargs):\n        \"\"\" Get summary of tranasctions grouped by year and month\n        \"\"\"\n        if self.year:\n            kwargs[\"year\"] = self.year\n        if self.month:\n            kwargs[\"month\"] = self.month\n        if self.transaction_type:\n            kwargs[\"transaction_type\"] = self.transaction_type\n        return Transaction.objects.get_category_summaries_by_period(\n            periods=[], **kwargs)\n\n",
			"month",
			"year",
			"get_summaries_by_period",
			"df",
			"get_datasets",
			"key",
			"label",
			"fields",
			"dataset",
			"series",
			"lael",
			"key",
			"NaN",
			"get_type",
			"kwargs",
			"get_month_name",
			"chart_config",
			"chart_model",
			"transcations",
			"transaction",
			"tranasction",
			"EXPENSE",
			"current_month",
			"transaction",
			"transcation",
			"current_year",
			"get_month_name",
			"today",
			"year=current_year, month=current_month - 1, day=",
			"month",
			"day",
			"year=current_year, month=current_month, day="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8002,
						"regions":
						{
						},
						"selection":
						[
							[
								1701,
								1701
							]
						],
						"settings":
						{
							"_anf_new": "",
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "css/main.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 986,
						"regions":
						{
						},
						"selection":
						[
							[
								388,
								388
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/CSS (Django).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 64.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "resume-html.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mainc",
				"css/main.css"
			],
			[
				"budet_for",
				"whatyouspend/templates/whatyouspend/budget_form.html"
			],
			[
				"budgetjs",
				"static_root/js/budget.js"
			],
			[
				"const",
				"whatyouspend/constants.py"
			],
			[
				"models",
				"whatyouspend/models.py"
			],
			[
				"css",
				"static_root/css/main.css"
			],
			[
				"baseh",
				"whatyouspend/templates/whatyouspend/base.html"
			],
			[
				"charthtm",
				"whatyouspend/templates/whatyouspend/partials/chart.html"
			],
			[
				"homeh",
				"whatyouspend/templates/whatyouspend/home.html"
			],
			[
				"baseht",
				"whatyouspend/templates/whatyouspend/base.html"
			],
			[
				"require",
				"requirements.txt"
			],
			[
				"sett",
				"django_whatyouspend/settings.py"
			],
			[
				"setting",
				"django_whatyouspend/settings.py"
			],
			[
				"wsgi",
				"django_whatyouspend/wsgi.py"
			],
			[
				"manage",
				"manage.py"
			],
			[
				"dockerfile",
				"Dockerfile"
			],
			[
				"docker-com",
				"docker-compose.yml"
			],
			[
				"forms",
				"whatyouspend/forms.py"
			],
			[
				"views",
				"whatyouspend/views.py"
			],
			[
				"url",
				"whatyouspend/urls.py"
			],
			[
				"budget_det",
				"whatyouspend/templates/whatyouspend/budget_detail.html"
			],
			[
				"odels",
				"whatyouspend/models.py"
			],
			[
				"chartsini",
				"whatyouspend/charts/__init__.py"
			],
			[
				"chartspy",
				"whatyouspend/charts.py"
			],
			[
				"budget_li",
				"whatyouspend/templates/whatyouspend/budget_list.html"
			],
			[
				"budget_for",
				"whatyouspend/templates/whatyouspend/budget_form.html"
			],
			[
				"requi",
				"requirements.txt"
			],
			[
				"view",
				"whatyouspend/views.py"
			],
			[
				"cons",
				"whatyouspend/constants.py"
			],
			[
				"radme",
				"README.md"
			],
			[
				"indexrs",
				"docs/index.rst"
			],
			[
				"chartrs",
				"docs/charts.rst"
			],
			[
				"conf",
				"docs/conf.py"
			],
			[
				"requir",
				"requirements.txt"
			],
			[
				"consta",
				"whatyouspend/constants.py"
			],
			[
				"chartps",
				"whatyouspend/charts.py"
			],
			[
				"cahrts",
				"docs/charts.rst"
			],
			[
				"manager",
				"whatyouspend/managers.py"
			],
			[
				"charts",
				"whatyouspend/charts.py"
			],
			[
				"hom",
				"whatyouspend/templates/whatyouspend/home.html"
			],
			[
				"wyc",
				"whatyouspend/templatetags/wyscharts.py"
			],
			[
				"homeht",
				"whatyouspend/templates/whatyouspend/home.html"
			],
			[
				"budget_lis",
				"whatyouspend/templates/whatyouspend/budget_list.html"
			],
			[
				"category_de",
				"whatyouspend/templates/whatyouspend/category_detail.html"
			],
			[
				"wysch",
				"whatyouspend/templatetags/wyscharts.py"
			],
			[
				"transactlist",
				"whatyouspend/templates/whatyouspend/transaction_list.html"
			],
			[
				"chartjs",
				"whatyouspend/templates/whatyouspend/partials/chart_js.html"
			],
			[
				"mixins",
				"whatyouspend/mixins.py"
			],
			[
				"chartrst",
				"docs/charts.rst"
			],
			[
				"maincss",
				"whatyouspend/static/css/main.css"
			],
			[
				"transatable",
				"whatyouspend/templates/whatyouspend/partials/transaction_table.html"
			],
			[
				"transaction_li",
				"whatyouspend/templates/whatyouspend/transaction_list.html"
			],
			[
				"dockercom",
				"docker-compose.yml"
			],
			[
				"budget_de",
				"whatyouspend/templates/whatyouspend/budget_detail.html"
			],
			[
				"managers",
				"whatyouspend/managers.py"
			],
			[
				"ons",
				"whatyouspend/constants.py"
			],
			[
				"mixin",
				"whatyouspend/mixins.py"
			],
			[
				"base",
				"whatyouspend/templates/whatyouspend/base.html"
			],
			[
				"tarnsdetil",
				"whatyouspend/templates/whatyouspend/transaction_detail.html"
			],
			[
				"translist",
				"whatyouspend/templates/whatyouspend/transaction_list.html"
			],
			[
				"home",
				"whatyouspend/templates/whatyouspend/home.html"
			],
			[
				"budgetlist",
				"whatyouspend/templates/whatyouspend/budget_list.html"
			],
			[
				"list",
				"whatyouspend/templates/whatyouspend/budget_list.html"
			],
			[
				"cateli",
				"whatyouspend/templates/whatyouspend/category_list.html"
			],
			[
				"mangers",
				"whatyouspend/managers.py"
			],
			[
				"budegt_ta",
				"whatyouspend/templates/whatyouspend/partials/budget_table.html"
			],
			[
				"budgetlis",
				"whatyouspend/templates/whatyouspend/budget_list.html"
			],
			[
				"utils",
				"whatyouspend/utils.py"
			],
			[
				"chart",
				"whatyouspend/charts.py"
			],
			[
				"categorys",
				"whatyouspend/templates/whatyouspend/partials/category_summary_table.html"
			],
			[
				"category_lis",
				"whatyouspend/templates/whatyouspend/category_list.html"
			],
			[
				"category_ta",
				"whatyouspend/templates/whatyouspend/partials/category_table.html"
			],
			[
				"urls",
				"whatyouspend/urls.py"
			],
			[
				"cs",
				"whatyouspend/static/css/main.css"
			],
			[
				"moels",
				"whatyouspend/models.py"
			],
			[
				"_lis",
				"whatyouspend/templates/whatyouspend/budget_list.html"
			],
			[
				"categor",
				"whatyouspend/templates/whatyouspend/category_detail.html"
			],
			[
				"chart_js",
				"whatyouspend/templates/whatyouspend/partials/chart_js.html"
			],
			[
				"factorie",
				"whatyouspend/factories.py"
			],
			[
				"mo",
				"whatyouspend/models.py"
			],
			[
				"tests",
				"whatyouspend/tests.py"
			],
			[
				"uil",
				"whatyouspend/utils.py"
			],
			[
				"reui",
				"requirements.txt"
			],
			[
				"dockerfil",
				"Dockerfile"
			],
			[
				"ocercom",
				"docker-compose.yml"
			],
			[
				"comp",
				"docker-compose.yml"
			],
			[
				"dockercomp",
				"docker-compose.yml"
			],
			[
				"manag",
				"whatyouspend/managers.py"
			],
			[
				"settings_ope",
				"django_whatyouspend/settings_openshift.py"
			],
			[
				"reu",
				"requirements.txt"
			],
			[
				"build",
				".openshift/action_hooks/build"
			],
			[
				"wsg",
				"django_whatyouspend/wsgi.py"
			],
			[
				"tranas",
				"whatyouspend/static/js/transaction.js"
			],
			[
				"transaction_for",
				"whatyouspend/templates/whatyouspend/transaction_form.html"
			],
			[
				"budge_tab",
				"whatyouspend/templates/whatyouspend/partials/budget_table.html"
			],
			[
				"transcationtable",
				"whatyouspend/templates/whatyouspend/partials/transaction_table.html"
			],
			[
				"utls",
				"whatyouspend/utils.py"
			],
			[
				"_detail",
				"whatyouspend/templates/whatyouspend/category_detail.html"
			],
			[
				"bude",
				"whatyouspend/templates/whatyouspend/budget_detail.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "rew",
		"selected_items":
		[
			[
				"rew",
				"~/code/rewards/rewards.sublime-project"
			],
			[
				"sandb",
				"~/code/sandbox/sandbox.sublime-project"
			],
			[
				"postdi",
				"~/code/postdis/postdis.sublime-project"
			],
			[
				"rewa",
				"~/code/rewards/rewards.sublime-project"
			],
			[
				"regis",
				"~/code/register/register.sublime-project"
			],
			[
				"rewar",
				"~/code/rewards/rewards.sublime-project"
			],
			[
				"tewa",
				"~/code/gracekennedy/birthright/birthright.sublime-workspace"
			],
			[
				"birthri",
				"~/code/gracekennedy/birthright/birthright.sublime-project"
			],
			[
				"birth",
				"~/code/birthright/birthright.sublime-workspace"
			],
			[
				"subscrip",
				"~/code/django-subscription/subscription.sublime-project"
			],
			[
				"django-",
				"~/code/django-subscription/subscription.sublime-project"
			],
			[
				"graceke",
				"~/code/gracekennedy/gracekeneddy.sublime-project"
			],
			[
				"wri",
				"~/code/wordpress/wordpress.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 229.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
